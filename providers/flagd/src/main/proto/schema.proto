syntax = "proto3";

package schema.v1;

option go_package = "schema/service/v1";
option java_package = "dev.openfeature.flagd.grpc";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";

message ErrorResponse {
    string error_code = 1;
    string reason = 2;
}

message ResolveBooleanRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
}
message ResolveBooleanResponse {
    bool value = 1;
    string reason = 2;
    string variant = 3;
}

message ResolveStringRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
}
message ResolveStringResponse {
    string value = 1;
    string reason = 2;
    string variant = 3;
}

message ResolveFloatRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
}
message ResolveFloatResponse {
    double value = 1;
    string reason = 2;
    string variant = 3;
}

message ResolveIntRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
}
message ResolveIntResponse {
    int64 value = 1;
    string reason = 2;
    string variant = 3;
}

message ResolveObjectRequest {
    string flag_key = 1;
    google.protobuf.Struct context = 2;
}
message ResolveObjectResponse {
    google.protobuf.Struct value = 1;
    string reason = 2;
    string variant = 3;
}

service Service {
    rpc ResolveBoolean(ResolveBooleanRequest) returns (ResolveBooleanResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/boolean"
            body: "context"
        };
    }
    rpc ResolveString(ResolveStringRequest) returns (ResolveStringResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/string"
            body: "context"
        };
    }
    rpc ResolveFloat(ResolveFloatRequest) returns (ResolveFloatResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/float"
            body: "context"
        };
    }
    rpc ResolveInt(ResolveIntRequest) returns (ResolveIntResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/int"
            body: "context"
        };
    }
    rpc ResolveObject(ResolveObjectRequest) returns (ResolveObjectResponse) {
        option (google.api.http) = {
            post: "/flags/{flag_key}/resolve/object"
            body: "context"
        };
    }
}